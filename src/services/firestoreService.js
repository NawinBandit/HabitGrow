// src/services/firestoreService.js
import { db } from '../firebase';
import { 
  collection, 
  doc, 
  setDoc, 
  getDoc, 
  serverTimestamp 
} from 'firebase/firestore';

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏¥‡∏™‡∏±‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const saveHabits = async (userId, habits) => {
  try {
    const userRef = doc(db, 'users', userId);
    await setDoc(userRef, {
      habits: habits,
      updatedAt: serverTimestamp()
    }, { merge: true });
    console.log('‚úÖ Habits saved successfully for user:', userId, '| Total:', habits.length);
    return true;
  } catch (error) {
    console.error('‚ùå Error saving habits:', error);
    return false;
  }
};

// ‡πÇ‡∏´‡∏•‡∏î‡∏ô‡∏¥‡∏™‡∏±‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const loadHabits = async (userId) => {
  try {
    const docRef = doc(db, 'users', userId);
    const docSnap = await getDoc(docRef);
    
    if (docSnap.exists()) {
      const data = docSnap.data();
      console.log('‚úÖ Habits loaded for user:', userId, '| Total:', data.habits?.length || 0);
      return data.habits || [];
    } else {
      console.log('‚ÑπÔ∏è No habits found for user:', userId);
      return [];
    }
  } catch (error) {
    console.error('‚ùå Error loading habits:', error);
    return [];
  }
};

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Journal Entry
export const saveJournalEntry = async (userId, newEntry) => {
  try {
    const userRef = doc(db, 'users', userId);
    
    const docSnap = await getDoc(userRef);
    const existingEntries = docSnap.exists() ? (docSnap.data().journalEntries || []) : [];
    
    const entryExists = existingEntries.some(e => e.id === newEntry.id);
    const updatedEntries = entryExists ? existingEntries : [newEntry, ...existingEntries];
    
    await setDoc(userRef, {
      journalEntries: updatedEntries,
      updatedAt: serverTimestamp()
    }, { merge: true });
    
    console.log('‚úÖ Journal saved successfully for user:', userId, '| Total entries:', updatedEntries.length);
    return true;
  } catch (error) {
    console.error('‚ùå Error saving journal:', error);
    return false;
  }
};

// ‡πÇ‡∏´‡∏•‡∏î Journal Entries
export const loadJournalEntries = async (userId) => {
  try {
    const docRef = doc(db, 'users', userId);
    const docSnap = await getDoc(docRef);
    
    if (docSnap.exists()) {
      const data = docSnap.data();
      console.log('‚úÖ Journal entries loaded for user:', userId, '| Total:', data.journalEntries?.length || 0);
      return data.journalEntries || [];
    } else {
      console.log('‚ÑπÔ∏è No journal entries found for user:', userId);
      return [];
    }
  } catch (error) {
    console.error('‚ùå Error loading journal:', error);
    return [];
  }
};

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á Journal Array
export const saveAllJournalEntries = async (userId, journalEntries) => {
  try {
    const userRef = doc(db, 'users', userId);
    await setDoc(userRef, {
      journalEntries: journalEntries,
      updatedAt: serverTimestamp()
    }, { merge: true });
    console.log('‚úÖ All journal entries saved for user:', userId, '| Total:', journalEntries.length);
    return true;
  } catch (error) {
    console.error('‚ùå Error saving all journal entries:', error);
    return false;
  }
};

// ‚ú® ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ä‡∏∑‡πà‡∏≠, ‡∏≠‡∏ß‡∏≤‡∏ï‡∏≤‡∏£‡πå, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•)
export const saveUserProfile = async (userId, profileData) => {
  try {
    const userRef = doc(db, 'users', userId);
    await setDoc(userRef, {
      profile: {
        name: profileData.name || '',
        avatar: profileData.avatar || 'üå±',
        email: profileData.email || '',
        updatedAt: serverTimestamp()
      }
    }, { merge: true });
    console.log('‚úÖ Profile saved successfully for user:', userId);
    console.log('üìù Profile data:', profileData);
    return true;
  } catch (error) {
    console.error('‚ùå Error saving profile:', error);
    return false;
  }
};

// ‚ú® ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
export const loadUserProfile = async (userId) => {
  try {
    const docRef = doc(db, 'users', userId);
    const docSnap = await getDoc(docRef);
    
    if (docSnap.exists() && docSnap.data().profile) {
      const profile = docSnap.data().profile;
      console.log('‚úÖ Profile loaded for user:', userId);
      console.log('üìù Profile data:', profile);
      return profile;
    } else {
      console.log('‚ÑπÔ∏è No profile found for user:', userId, '- Creating default profile');
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      const defaultProfile = {
        name: '',
        avatar: 'üå±',
        email: ''
      };
      return defaultProfile;
    }
  } catch (error) {
    console.error('‚ùå Error loading profile:', error);
    return null;
  }
};